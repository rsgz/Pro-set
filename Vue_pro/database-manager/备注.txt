组合式api-->类似于 函数式编程 把相关的放一起
选项式api-->面向对象

语法
1 这里面的写法是script setup语法糖的写法 组合式api
2 JSON.parse(localStorage.getItem("servers") 本地获取json数据
3 localStorage.setItem("servers", JSON.stringify(servers.value)); 存储json数据到本地
4 servers.value[index] 这个获取服务器 元素
5 Object.assign(currentServer, servers.value[index]);  用服务器数据 替换临时服务器变量
6 servers.value.splice(index, 1);  删除服务器  index就是数组其中的索引值
7 currentIndex === -1 表示未选中服务器  没选中服务器 触发弹框就是 添加服务器的逻辑  添加用 push语法 servers.value.push({ ...currentServer });
8 index非-1 就是 选中服务器 弹框 那就是 编辑服务器的逻辑  编辑完的数据替换 逻辑 用splice语法  servers.value.splice(currentIndex, 1, { ...currentServer });
9 serverDialog.value.showModal();  这两个分别表示 打开和关闭 对话框  在视图中 用这个 <dialog ref="serverDialog">
   serverDialog.value.close();
10 <form @submit.prevent="saveServer">  就是阻止 @submit.prevent的默认事件<button type="submit">保存</button> 然后执行saveServer 函数
11 @click="closeDialog"语法 就是点击 会触发closeDialog 函数  通常在button里面 <button type="button" @click="closeDialog">取消</button>
12 <p>{{ server.name }}</p>  这种数据绑定 是单向的  变量决定 视图
13 v-model="currentServer.name"  这种数据绑定是双向的  变量决定 视图   视图决定变量  
   通常出现在 input textarea select里面
14 Object.assign 用于变量值替换  这是替换方向 左<--右  Object.assign(currentServer, { name: "", address: "", port: "" });
15 生命周期 事件钩子 比如说 对话框进行监听 关闭的时候 变量就恢复初始值 这样 就是状态和变量值 一一对应
onMounted(() => {
  serverDialog.value.addEventListener('close', () => {
    currentIndex = -1;
    Object.assign(currentServer, { name: "", address: "", port: "" });
  });
});
16 reactive就做用于{}几种数据类型  ref作用范围更广 几乎是所有的
17 script里面ref变量值 需要加上value获取  但是模板视图里面就不用value 会自动解包
18 